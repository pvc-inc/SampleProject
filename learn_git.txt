# Learn git
git help
git help -a
q
git help -g
git help attributes
q
git help everyday
q
git help glossary
q
git help ignore
q
git help modules
q
git help revisions
q
git help tutorial
q
git help workflows
q
git help init
q
git init --help
q
git help add
q
git add --help
q
git help commit
q
git commit --help
q
git help status
q
git status --help
clear

#Creating A New Repository
# go to https://github.com > Start A Project > ProjectName
# Click Create repository

mkdir ProjectName && cd ProjectName
echo "# ProjectName" >> README.md
git init                # mkdir .git and add important files
git status
git diff
git diff --cached
git diff HEAD
git commit -m "This does nothing when there is nothing to commit"
git log
git log --oneline
git log --merges
git log --graph

git add .
git commit -m "first commit"
ls
ls -a
cd .git
tree
cat description
nano description
ProjectName; a description of ProjectName
Ctrl+X
Y
cat description
cd ..
clear

git remote add origin git@github.com:<username>/ProjectName
git remote -v
git push -u origin master
clear

# Keeping Files And Directories Private
cat .gitignore
ls -a
mkdir DirectoryNotToBeShared
echo "DirectoryNotToBeShared/" >> .gitignore
cat .gitignore
ls -a
touch FileNotToBeShared.extension
echo "FileNotToBeShared.extension" >> .gitignore
cat .gitignore
ls
ls -a
git status
git add .gitignore
git diff
git diff --cached
git diff HEAD
git commit -am "Created list of Files and Directories for git to ignore"
git log
git log --oneline
git log --merges
git log --graph
git status
git add DirectoryNotToBeShared/
git add FileNotToBeShared.extension
git status
git push -u origin master
clear

# Managing Files and Directories
touch File{1,2,3,N}InThisDirectory.extension
ls
tree
mkdir Directory{1,2,3,N}
ls
tree
touch Directory{1,2,3,N}/File{1,2,3,N}InThisDirectory.extension
touch Directory2/python_file.py
touch Directory2/java_file.java
touch Directory2/java_file.war
touch Directory3/html_file.html
touch Directory3/javscript_file.js
touch DirectoryN/compressed_file.zip
touch DirectoryN/tape_archive_file.tar
tree
cd Directory3
pwd
mkdir ChildOfDirectory3
cd ChildOfDirectory3
mkdir ChildOfChildOfDirectory3
cd ChildOfChildOfDirectory3
pwd
touch textfile{1,2,3,N}.txt
ls
tree
cd ../..
pwd
ls
tree
cd ..
ls
tree
clear 

#Adding Files and Directories to Local Repository
git status
tree
nano File1InThisDirectory.extension
A few changes in File1InThisDirectory.extension
ctrl+x
y
git add File1InThisDirectory.extension
git status
git commit -m "Modified File1InThisDirectory.extension"
git push -u origin master
git status
nano Directory1/FileInDirectory1.extension
This is File 1 in Directory 1
ctrl+x
y
git add Directory1/File1InThisDirectory.extension 
git addDirectory1/FileNInThisDirectory.extension
git commit -m "Modified File 1 in Directory"
git push -u origin master
git status
git add Directory2/File1InThisDirectory.extension
nano Directory2/File1InThisDirectory.extension
What happens if I make a change after adding?
ctrl+x
y
git commit -m "Modified File 1 in Directory2"
git status
git add Directory2/File1InThisDirectory.extension
git status
git commit -m "Modified File 1 in Directory2"
git push -u origin master

git status
git add Directory3/
git status
git add .
git status
tree
git diff
git diff --cached
q
git diff HEAD
q
git commit -am "Added new Ffives"
git log
git log --oneline
git log --graph
git commit --amend -m "Added new Files and Directories"
git log
git log --oneline
git log --merges
git log --graph
git push -u origin master
git diff
git status
clear

#Branching
git status
git branch
git branch -a
git branch -v
git branch -vv
git branch a_new_branch
git branch
git branch -d a_new_branch
git branch
git branch an_old_branch_name
git branch -a
git branch -m an_old_branch_name a_new_branch_name
git branch -a
git branch -v
git branch -vv
git branch a_branch
git branch -a
git checkout a_branch
git branch -a
git status
git checkout master
git status
git branch -a
git checkout a_new_branch_name
git branch -a
git status
git checkout -b a_new_branch
git branch -a
git status
git checkout master
git checkout -b a_dead_branch
git branch -a
git status
git checkout master
git branch -D a_dead_branch
git branch -a
git status
ls
tree
git branch -a
git push origin a_branch
git branch -a
git push origin a_new_branch
git branch -a

# Merging Changes
git checkout a_branch
touch file_from_a_branch.extension
mkdir new_directory_from_a_branch
touch new_directory_from_a_branch/file_in_new_directory_from_a_branch.extension
git add -A
git commit -am "Added New File and Directory in a_branch"
git push origin a_branch
git diff
git diff master
git checkout master
git diff remotes/origin/master
git diff a_branch
git merge a_branch
git diff
git diff a_branch
git diff remotes/origin/master
git push origin master

git checkout a_new_branch
git branch -a
git diff master
git merge master
nano FileInThisDirectory.extension
1 genius Idea to test in a_new_branch
ctrl+X
y
git status
git add -A
git commit -am "1 Genius Idea tested in a_new_branch"
git diff master
git diff remotes/origin/a_new_branch
git push origin a_new_branch
git checkout master
git merge --no-ff a_new_branch
Had a Genius idea and tested it in a_new_branch
# save and exit
git diff
git diff a_new_branch
git diff remotes/origin/master
git status
git push origin master
git log
git log --oneline
git log --merges
git log graph

#Tagging
git tag
git tag -a v0.1 "Beta Test version 1"
git tag
git tag -a v0.1 -m "Beta Test version 1"
git tag
git tag -a v1.1 -m "Version 1.0 revision 1"
git tag
git tag v2.0 -m "Version 2.0"
git tag
git tag vN.M -m "Version N revision M
git tag
git tag any_tag -m "Description for the Tag"
git status
clear 

git show
git show v0.1
git show v1.1
git show v2.0
git show vN.M
git show any_tag
git show non_existent_tag
clear

git push origin v0.1
git push origin vN.M
git push origin --tags

git log
git log --oneline
git log --merges
git log --graph

# Cloning a repository
git clone <git_URL>
git clone --depth <N> <git_URL>
git clone -b <branch_name> <git_URL> --single-branch
